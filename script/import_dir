#!/usr/bin/ruby
#
# import_dir
#
# Import directory to Items
#

require 'rubygems'
require 'fileutils'

ENV['RAILS_ENV'] ||= 'development'
$toplevel = File.expand_path(File.join(File.dirname(__FILE__), ".."))
require File.join($toplevel, "config", "environment")

$tags = Array.new

def usage msg=nil
  $stderr.puts msg if msg
  $stderr.puts "Usage: import_dir [-r] <directory>"
  $stderr.puts "\t-r recursive"
  exit 1
end

def create_thumbnail item
  orig_file = File.join(item.directory, item.filename)
  thumb_dir = File.join($toplevel, "public", item.thumb_dir)
  thumb_file = File.join($toplevel, "public", item.thumb_file)
  unless File.exist?(item.thumb_file)
    FileUtils.mkdir_p thumb_dir
    system "convert", orig_file, "-resize", "200x200^", "-gravity", "center", thumb_file
  end
end

def import path, recursive
  Dir.chdir(path) do |dir|
    Dir.foreach('.') do |f|
      next if f[0,1] == '.'
      if File.directory?(f)
        import(File.join(path, f), recursive) if recursive
      elsif File.file?(f)
        unless File.readable?(f)
          $stderr.puts "Unreadable, skipping #{f}"
          next
        end
        extname = File.extname(f)
        unless extname.empty?
          fileextension = Fileextension.find_by(:name => extname[1..-1].downcase) # remove leading dot from extname
          fileextension = fileextension.first if fileextension.is_a? Array
        end
        item = Item.find_or_create_by(:filename => f, :directory => dir)
        if fileextension && fileextension.picture?
          create_thumbnail item
        end
        unless $tags.empty?
          $tags.each do |s|
            tag_s,value_s = s.split "="
            tag = Tag.find_or_create_by(:name => tag_s, :value => value_s)
            item.tags << tag
          end
        end
        item.mimetype = fileextension.mimetype if fileextension
        item.save
        puts "#{f} #{item}"
      else
        $stderr.puts "Not imported: #{f}"
      end
    end # Dir.foreach
  end # Dir.chdir
end

recursive = false

until ARGV.empty? do
  arg = ARGV.shift
  case arg
  when "-r"
    recursive = true
  when "-t"
    $tags << ARGV.shift
  else
    dir = arg
  end
end

usage "Must specify directory" unless dir

usage "#{dir} is not a directory" unless File.directory?(dir)

import dir, recursive
